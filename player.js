const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("play")
        .setDescription("‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube")
        .addStringOption(option =>
            option.setName("query")
                .setDescription("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ URL")
                .setRequired(true)
        ),

    async run(client, interaction) {
        try {
            const query = interaction.options.getString("query");
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö voice channel
            const voiceChannel = interaction.member?.voice?.channel;
            
            if (!voiceChannel) {
                return interaction.reply({ 
                    content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Voice Channel ‡∏Å‡πà‡∏≠‡∏ô!", 
                    ephemeral: true 
                });
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
            const permissions = voiceChannel.permissionsFor(interaction.client.user);
            if (!permissions.has("Connect") || !permissions.has("Speak")) {
                return interaction.reply({
                    content: "‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏π‡∏î‡πÉ‡∏ô Voice Channel ‡∏ô‡∏µ‡πâ!",
                    ephemeral: true
                });
            }

            await interaction.deferReply();

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á player
            let player = client.riffy.players.get(interaction.guild.id);
            
            if (!player) {
                player = client.riffy.create({
                    guild: interaction.guild.id,
                    voiceChannel: voiceChannel.id,
                    textChannel: interaction.channel.id,
                    volume: 50,
                    selfDeafen: true,
                });
            }

            // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ player
            if (!player.connected) {
                player.connect();
            }

            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á
            let resolve;
            
            try {
                resolve = await client.riffy.resolve({ 
                    query: query,
                    requester: interaction.user.id 
                });

            } catch (resolveError) {
                console.error("Resolve error:", resolveError);
                
                if (player && player.queue.length === 0) {
                    player.destroy();
                }
                
                return interaction.editReply({
                    content: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ\n" +
                             "**‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:**\n" +
                             "‚Ä¢ Lavalink node ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n" +
                             "‚Ä¢ URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n" +
                             "‚Ä¢ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
                });
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if (!resolve || !resolve.tracks || resolve.tracks.length === 0) {
                if (player && player.queue.length === 0) {
                    player.destroy();
                }
                return interaction.editReply("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
            }

            const { loadType, tracks, playlistInfo } = resolve;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö loadType
            if (loadType === "error" || loadType === "empty") {
                if (player && player.queue.length === 0) {
                    player.destroy();
                }
                return interaction.editReply("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° Playlist
            if (loadType === "playlist") {
                for (const track of tracks) {
                    track.info.requester = interaction.user.id;
                    player.queue.push(track);
                }

                if (!player.playing && !player.paused) {
                    player.play();
                }

                const embed = new EmbedBuilder()
                    .setColor("#9b59b6")
                    .setTitle("üìã ‡πÄ‡∏û‡∏¥‡πà‡∏° Playlist")
                    .setDescription(`**${playlistInfo?.name || 'Playlist'}**`)
                    .addFields(
                        { name: "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏•‡∏á", value: `${tracks.length} ‡πÄ‡∏û‡∏•‡∏á`, inline: true },
                        { name: "üë§ ‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á", value: `<@${interaction.user.id}>`, inline: true }
                    )
                    .setFooter({ text: `‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${player.queue.length} ‡πÄ‡∏û‡∏•‡∏á` })
                    .setTimestamp();

                return interaction.editReply({ embeds: [embed] });
            } 
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
            else {
                const track = tracks[0];
                track.info.requester = interaction.user.id;
                player.queue.push(track);

                const isPlaying = player.playing || player.paused;
                
                const embed = new EmbedBuilder()
                    .setColor(isPlaying ? "#3498db" : "#2ecc71")
                    .setTitle(isPlaying ? "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏•‡∏á‡∏Ñ‡∏¥‡∏ß" : "üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô")
                    .setDescription(`**[${track.info.title}](${track.info.uri})**`)
                    .addFields(
                        { name: "‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", value: formatTime(track.info.length), inline: true },
                        { name: "üë§ ‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á", value: `<@${interaction.user.id}>`, inline: true }
                    )
                    .setThumbnail(track.info.thumbnail || null)
                    .setTimestamp();

                if (isPlaying) {
                    embed.addFields({ 
                        name: "üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß", 
                        value: `#${player.queue.length}`, 
                        inline: true 
                    });
                    embed.setFooter({ text: `‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${player.queue.length} ‡πÄ‡∏û‡∏•‡∏á` });
                }

                if (!isPlaying) {
                    player.play();
                }

                return interaction.editReply({ embeds: [embed] });
            }

        } catch (error) {
            console.error("Play command error:", error);
            console.error("Error stack:", error.stack);
            
            const errorMessage = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
            
            if (interaction.deferred || interaction.replied) {
                return interaction.editReply({ content: errorMessage }).catch(console.error);
            } else {
                return interaction.reply({ content: errorMessage, ephemeral: true }).catch(console.error);
            }
        }
    }
};

function formatTime(ms) {
    if (!ms || ms === 0) return "üî¥ LIVE";
    
    const seconds = Math.floor((ms / 1000) % 60);
    const minutes = Math.floor((ms / (1000 * 60)) % 60);
    const hours = Math.floor(ms / (1000 * 60 * 60));
    
    if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
}
