const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("play")
        .setDescription("‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube")
        .addStringOption(option =>
            option.setName("query")
                .setDescription("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ URL")
                .setRequired(true)
        ),

    async run(client, interaction) {
        try {
            const query = interaction.options.getString("query");
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö voice channel
            const member = interaction.guild.members.cache.get(interaction.user.id);
            const voiceChannel = member?.voice?.channel;
            
            if (!voiceChannel) {
                return interaction.reply({ 
                    content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Voice Channel ‡∏Å‡πà‡∏≠‡∏ô!", 
                    ephemeral: true 
                });
            }

            await interaction.deferReply();

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á player
            let player = client.riffy.players.get(interaction.guild.id);
            
            if (!player) {
                player = client.riffy.create({
                    guild: interaction.guild.id,
                    voiceChannel: voiceChannel.id,
                    textChannel: interaction.channel.id,
                    volume: 50,
                    selfDeafen: true,
                });
            }

            // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ player ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°
            if (!player.connected) {
                player.connect();
            }

            // **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ - ‡πÄ‡∏û‡∏¥‡πà‡∏° try-catch ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
            let resolve;
            
            try {
                resolve = await client.riffy.resolve({ 
                    query: query,
                    requester: interaction.user.id 
                });

                console.log("Resolve result:", JSON.stringify(resolve, null, 2)); // Debug log

            } catch (resolveError) {
                console.error("Resolve error details:", resolveError);
                
                // ‡∏•‡∏ö player ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
                if (player && player.queue.length === 0) {
                    player.destroy();
                }
                
                return interaction.editReply({
                    content: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞:\n" +
                             "‚Ä¢ Lavalink node ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n" +
                             "‚Ä¢ URL ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n" +
                             "‚Ä¢ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
                });
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ resolve ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!resolve) {
                if (player && player.queue.length === 0) {
                    player.destroy();
                }
                return interaction.editReply("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ");
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö loadType
            const { loadType, tracks, playlistInfo } = resolve;

            if (loadType === "error" || loadType === "empty") {
                if (player && player.queue.length === 0) {
                    player.destroy();
                }
                return interaction.editReply("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ tracks ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!tracks || tracks.length === 0) {
                if (player && player.queue.length === 0) {
                    player.destroy();
                }
                return interaction.editReply("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
            }

            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Playlist
            if (loadType === "playlist") {
                for (const track of tracks) {
                    track.info.requester = interaction.user.id;
                    player.queue.push(track);
                }

                if (!player.playing && !player.paused) {
                    player.play();
                }

                const embed = new EmbedBuilder()
                    .setColor("#00FF00")
                    .setTitle("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Playlist")
                    .setDescription(`**${playlistInfo?.name || 'Playlist'}**`)
                    .addFields(
                        { name: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏•‡∏á", value: `${tracks.length} ‡πÄ‡∏û‡∏•‡∏á`, inline: true },
                        { name: "‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á", value: `<@${interaction.user.id}>`, inline: true }
                    )
                    .setTimestamp();

                return interaction.editReply({ embeds: [embed] });
            } 
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
            else {
                const track = tracks[0];
                track.info.requester = interaction.user.id;
                player.queue.push(track);

                const embed = new EmbedBuilder()
                    .setColor("#00FF00")
                    .setTitle("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏•‡∏á‡∏Ñ‡∏¥‡∏ß")
                    .setDescription(`**[${track.info.title}](${track.info.uri})**`)
                    .addFields(
                        { name: "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", value: formatTime(track.info.length), inline: true },
                        { name: "‡∏ú‡∏π‡πâ‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á", value: `<@${interaction.user.id}>`, inline: true },
                        { name: "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß", value: `#${player.queue.length}`, inline: true }
                    )
                    .setThumbnail(track.info.thumbnail)
                    .setTimestamp();

                if (!player.playing && !player.paused) {
                    player.play();
                    embed.setTitle("üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô");
                }

                return interaction.editReply({ embeds: [embed] });
            }

        } catch (error) {
            console.error("Play command error:", error);
            console.error("Error stack:", error.stack);
            
            const errorMessage = "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á\n" +
                               `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${error.message}`;
            
            if (interaction.deferred) {
                return interaction.editReply({ content: errorMessage });
            } else if (!interaction.replied) {
                return interaction.reply({ content: errorMessage, ephemeral: true });
            }
        }
    }
};

function formatTime(ms) {
    const minutes = Math.floor(ms / 60000);
    const seconds = ((ms % 60000) / 1000).toFixed(0);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
}
